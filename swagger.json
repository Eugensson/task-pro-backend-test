{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Tasks-Pro API",
    "description": "Tasks-Pro API Documentation",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [{ "url": "https://tp-backend-905x.onrender.com" }],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Users",
      "description": "User endpoints"
    },
    {
      "name": "Boards",
      "description": "Board endpoints"
    },
    {
      "name": "Helper",
      "description": "Helper endpoint"
    }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New user is registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponse"
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "409": { "description": "User with such email already exists" }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created session for existing user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "403": { "description": "Provided password is incorrect" },
          "404": { "description": "User with such email not found" }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequest"
              }
            }
          }
        },
        "responses": {
          "204": { "description": "User signed out" },
          "401": { "description": "Missing header with authorization token" }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": ["Users"],
        "summary": "Get current user's data",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logged user returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "401": { "description": "Missing header with authorization token" }
        }
      },
      "patch": {
        "tags": ["Users"],
        "summary": "Edit current user's profile",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrentUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User info updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUpdateResponse"
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Missing header with authorization token" }
        }
      }
    },
    "/api/users/avatars": {
      "patch": {
        "tags": ["Users"],
        "summary": "Edit current user's avatar",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AvatarUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User avatarURL updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarUpdateResponse"
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Missing header with authorization token" }
        }
      }
    },
    "/api/boards": {
      "get": {
        "tags": ["Boards"],
        "summary": "Get all boards for current user",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": { "description": "Boards found" },
          "401": { "description": "Missing header with authorization token" }
        }
      },
      "post": {
        "tags": ["Boards"],
        "summary": "Add a new board for current user",
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": { "description": "The board was successfully created" },
          "400": { "description": "Error creating board" },
          "401": { "description": "Missing header with authorization token" }
        }
      }
    },
    "/api/boards/{boardID}": {
      "patch": {
        "tags": ["Boards"],
        "summary": "Edit a board for current user",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": { "description": "The board was successfully updated" },
          "400": { "description": "Board update failed" },
          "401": { "description": "Missing header with authorization token" }
        }
      },
      "delete": {
        "tags": ["Boards"],
        "summary": "Delete a board for current user",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": { "description": "The board was successfully deleted" },
          "401": { "description": "Missing header with authorization token" },
          "404": { "description": "There is no such user board" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/api/helper": {
      "post": {
        "tags": ["Helper"],
        "summary": "Send a help request",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HelperRequest"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Help request sent successfully" },
          "400": { "description": "Validation error" },
          "500": { "description": "Failed to send help request" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegisterRequest": {
        "type": "object",
        "required": ["username", "email", "password"],
        "properties": {
          "username": {
            "type": "string",
            "description": "User's name",
            "example": "Leandro Kaplan"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "leandroK@gmail.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "RegisterResponse": {
        "type": "object",
        "required": ["username", "email"],
        "properties": {
          "username": {
            "type": "string",
            "description": "User's name",
            "example": "Leandro Kaplan"
          },
          "email": {
            "type": "string",
            "description": "User's id",
            "format": "email",
            "example": "leandroK@gmail.com"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "leandroK@gmail.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "required": ["token"],
        "properties": {
          "token": {
            "type": "string",
            "description": "User's JWTtoken",
            "format": "JWTtoken",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDNiOTFhNzJlNjM2MjdhMDZkYjgxYiIsImlhdCI8MTY5MTY2MzgyNywiZXhwIjoxNjkxNzQ2NjI8fQ.9BIlfDFwOIhcwddT1GLDd-Ri08H7JVWPGFDVVAicLOw"
          }
        }
      },
      "LogoutRequest": {
        "type": "object",
        "required": ["token"],
        "properties": {
          "token": {
            "type": "string",
            "description": "User's JWTtoken",
            "format": "JWTtoken",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDNiOTFhNzJlNjM2MjdhMDZkYjgxYiIsImlhdCI8MTY5MTY2MzgyNywiZXhwIjoxNjkxNzQ2NjI8fQ.9BIlfDFwOIhcwddT1GLDd-Ri08H7JVWPGFDVVAicLOw"
          }
        }
      },
      "CurrentRequest": {
        "type": "object",
        "required": ["token"],

        "properties": {
          "token": {
            "type": "string",
            "description": "User's JWTtoken",
            "format": "JWTtoken",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDNiOTFhNzJlNjM2MjdhMDZkYjgxYiIsImlhdCI8MTY5MTY2MzgyNywiZXhwIjoxNjkxNzQ2NjI8fQ.9BIlfDFwOIhcwddT1GLDd-Ri08H7JVWPGFDVVAicLOw"
          }
        }
      },
      "CurrentResponse": {
        "type": "object",
        "required": [
          "_id",
          "email",
          "password",
          "username",
          "avatarURL",
          "boards",
          "token"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "User's id",
            "example": "64d3b91a88e63627a06db81b"
          },
          "username": {
            "type": "string",
            "description": "User's name",
            "example": "Leandro Kaplan"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "leandroK@gmail.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "$3b$10$DymDXytsMVK9R8TksfkRn.vzRONdN8feNKZYWKbTCkeIem1ZIT73G"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatar",
            "example": "avatar"
          },
          "theme": {
            "type": "string",
            "description": "User's theme",
            "example": "LIGHT"
          },
          "boards": {
            "type": "array",
            "description": "User's boards",
            "example": "[]"
          },
          "token": {
            "type": "string",
            "description": "User's JWTtoken",
            "format": "JWTtoken",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDNiOTFhNzJlNjM2MjdhMDZkYjgxYiIsImlhdCI8MTY5MTY2MzgyNywiZXhwIjoxNjkxNzQ2NjI8fQ.9BIlfDFwOIhcwddT1GLDd-Ri08H7JVWPGFDVVAicLOw"
          }
        }
      },
      "CurrentUpdateRequest": {
        "type": "object",
        "required": ["username", "email", "password", "theme"],
        "properties": {
          "username": {
            "type": "string",
            "description": "User's name",
            "example": "Ivo Bobul"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "IvoBobul@gmail.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty777"
          },
          "theme": {
            "type": "string",
            "description": "User's theme",
            "example": "DARK"
          }
        }
      },
      "CurrentUpdateResponse": {
        "type": "object",
        "required": [
          "_id",
          "username",
          "email",
          "password",
          "avatarURL",
          "theme",
          "boards",
          "token"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "User's id",
            "example": "64d3b91a88e63627a06db81b"
          },
          "username": {
            "type": "string",
            "description": "User's name",
            "example": "Ivo Bobul"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "IvoBobul@gmail.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "$2b$10$EB3lGV1v.vBmnAxYEPuzg.7ZxWnB/CwChhJGHUyB/I1n0UaQeMWia"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatar",
            "example": "avatar"
          },
          "theme": {
            "type": "string",
            "description": "User's theme",
            "example": "DARK"
          },
          "boards": {
            "type": "array",
            "description": "User's boards",
            "example": "[]"
          },
          "token": {
            "type": "string",
            "description": "User's JWTtoken",
            "format": "JWTtoken",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDNiOTFhNzJlNjM2MjdhMDZkYjgxYiIsImlhdCI8MTY5MTY2MzgyNywiZXhwIjoxNjkxNzQ2NjI8fQ.9BIlfDFwOIhcwddT1GLDd-Ri08H7JVWPGFDVVAicLOw"
          }
        }
      },
      "AvatarUpdateRequest": {
        "type": "object",
        "required": ["avatarURL"],
        "properties": {
          "avatarURL": {
            "type": "file",
            "description": "User's avatar"
          }
        }
      },
      "AvatarUpdateResponse": {
        "type": "object",
        "required": [
          "_id",
          "username",
          "email",
          "password",
          "avatarURL",
          "theme",
          "boards",
          "token"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "User's id",
            "example": "64d3b91a88e63627a06db81b"
          },
          "username": {
            "type": "string",
            "description": "User's name",
            "example": "Ivo Bobul"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "IvoBobul@gmail.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "$2b$10$EB3lGV1v.vBmnAxYEPuzg.7ZxWnB/CwChhJGHUyB/I1n0UaQeMWia"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatar",
            "example": "avatar"
          },
          "theme": {
            "type": "string",
            "description": "User's theme",
            "example": "DARK"
          },
          "boards": {
            "type": "array",
            "description": "User's boards",
            "example": "[]"
          },
          "token": {
            "type": "string",
            "description": "User's JWTtoken",
            "format": "JWTtoken",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDNiOTFhNzJlNjM2MjdhMDZkYjgxYiIsImlhdCI8MTY5MTY2MzgyNywiZXhwIjoxNjkxNzQ2NjI8fQ.9BIlfDFwOIhcwddT1GLDd-Ri08H7JVWPGFDVVAicLOw"
          }
        }
      },
      "HelperRequest": {
        "type": "object",
        "required": ["email", "comment"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "leandroK@gmail.com"
          },
          "comment": {
            "type": "string",
            "description": "User's helper request comment",
            "example": "qwerty qwerty qwerty qwerty qwerty qwerty"
          }
        }
      },
      "errorBadRequesResponse": {
        "type": "object",
        "required": ["status", "message"],
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": "400"
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Bad request"
          }
        }
      },
      "errorConflictResponse": {
        "type": "object",
        "required": ["status", "message"],
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": "409"
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "User with email - user@example.com, already exist"
          }
        }
      },
      "errorUnauthorizedResponse": {
        "type": "object",
        "required": ["status", "message"],
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": "401"
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Not authorized"
          }
        }
      },
      "errorNotFoundResponse": {
        "type": "object",
        "required": ["status", "message"],
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": "404"
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Not found"
          }
        }
      },
      "errorAddCategoryResponse": {
        "type": "object",
        "required": ["status", "message"],
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": "409"
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "The category you are trying to add already exists"
          }
        }
      },
      "errorRemoveCategoryResponse": {
        "type": "object",
        "required": ["status", "message"],
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": "409"
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "The category you are trying to delete is not exist"
          }
        }
      }
    }
  }
}
